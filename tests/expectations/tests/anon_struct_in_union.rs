/* automatically generated by rust-bindgen */


#![allow(dead_code, non_snake_case, non_camel_case_types, non_upper_case_globals)]


#[repr(C)]
#[derive(Copy)]
pub struct s {
    pub u: s__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union s__bindgen_ty_1 {
    pub field: s__bindgen_ty_1_inner,
}
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct s__bindgen_ty_1_inner {
    pub b: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_s__bindgen_ty_1_inner() {
    assert_eq!(::std::mem::size_of::<s__bindgen_ty_1_inner>() , 4usize ,
               concat ! ( "Size of: " , stringify ! ( s__bindgen_ty_1_inner )
               ));
    assert_eq! (::std::mem::align_of::<s__bindgen_ty_1_inner>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( s__bindgen_ty_1_inner ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const s__bindgen_ty_1_inner ) ) . b as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( s__bindgen_ty_1_inner )
                , "::" , stringify ! ( b ) ));
}
impl Clone for s__bindgen_ty_1_inner {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_s__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<s__bindgen_ty_1>() , 4usize , concat ! (
               "Size of: " , stringify ! ( s__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<s__bindgen_ty_1>() , 4usize , concat !
                ( "Alignment of " , stringify ! ( s__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const s__bindgen_ty_1 ) ) . field as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( s__bindgen_ty_1 ) ,
                "::" , stringify ! ( field ) ));
}
impl Clone for s__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
impl Default for s__bindgen_ty_1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[test]
fn bindgen_test_layout_s() {
    assert_eq!(::std::mem::size_of::<s>() , 4usize , concat ! (
               "Size of: " , stringify ! ( s ) ));
    assert_eq! (::std::mem::align_of::<s>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( s ) ));
    assert_eq! (unsafe { & ( * ( 0 as * const s ) ) . u as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( s ) , "::" , stringify
                ! ( u ) ));
}
impl Clone for s {
    fn clone(&self) -> Self { *self }
}
impl Default for s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
