/* automatically generated by rust-bindgen */


#![allow(dead_code, non_snake_case, non_camel_case_types, non_upper_case_globals)]

pub type RefPtr<T> = T;

#[repr(C)]
#[derive(Debug, Copy)]
pub struct b {
    pub _base: g,
}
#[test]
fn bindgen_test_layout_b() {
    assert_eq!(::std::mem::size_of::<b>() , 1usize , concat ! (
               "Size of: " , stringify ! ( b ) ));
    assert_eq! (::std::mem::align_of::<b>() , 1usize , concat ! (
                "Alignment of " , stringify ! ( b ) ));
}
impl Clone for b {
    fn clone(&self) -> Self { *self }
}
impl Default for b {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct A {
    pub _address: u8,
}
pub type A_a = b;
#[test]
fn bindgen_test_layout_A() {
    assert_eq!(::std::mem::size_of::<A>() , 1usize , concat ! (
               "Size of: " , stringify ! ( A ) ));
    assert_eq! (::std::mem::align_of::<A>() , 1usize , concat ! (
                "Alignment of " , stringify ! ( A ) ));
}
impl Clone for A {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct e<c> {
    pub d: RefPtr<c>,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<c>>,
}
impl <c> Default for e<c> {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct f {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct g {
    pub h: f,
}
#[test]
fn bindgen_test_layout_g() {
    assert_eq!(::std::mem::size_of::<g>() , 1usize , concat ! (
               "Size of: " , stringify ! ( g ) ));
    assert_eq! (::std::mem::align_of::<g>() , 1usize , concat ! (
                "Alignment of " , stringify ! ( g ) ));
    assert_eq! (unsafe { & ( * ( 0 as * const g ) ) . h as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( g ) , "::" , stringify
                ! ( h ) ));
}
impl Clone for g {
    fn clone(&self) -> Self { *self }
}
impl Default for g {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    #[link_name = "_Z25Servo_Element_GetSnapshotv"]
    pub fn Servo_Element_GetSnapshot() -> A;
}
#[test]
fn __bindgen_test_layout_f_open0_e_open1_int_close1_close0_instantiation() {
    assert_eq!(::std::mem::size_of::<f>() , 1usize , concat ! (
               "Size of template specialization: " , stringify ! ( f ) ));
    assert_eq!(::std::mem::align_of::<f>() , 1usize , concat ! (
               "Alignment of template specialization: " , stringify ! ( f )
               ));
}
